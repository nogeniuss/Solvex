const express = require('express');
const router = express.Router();
const { query, queryOne, execute } = require('../database');
const { authenticateToken } = require('./auth');

// GET - Listar investimentos
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { status, categoria_id, page = 1, limit = 50 } = req.query;
    const offset = (page - 1) * limit;
    
    let whereClause = 'WHERE i.user_id = ?';
    const params = [req.user.id];

    if (status) {
      whereClause += ' AND i.status = ?';
      params.push(status);
    }

    if (categoria_id) {
      whereClause += ' AND i.categoria_id = ?';
      params.push(categoria_id);
    }

    // Buscar investimentos
    const investimentos = await query(`
      SELECT i.*, c.nome as categoria_nome, c.cor as categoria_cor
      FROM investimentos i
      LEFT JOIN categorias c ON i.categoria_id = c.id
      ${whereClause}
      ORDER BY i.data_inicio DESC
      LIMIT ? OFFSET ?
    `, [...params, parseInt(limit), offset]);

    // Contar total
    const totalResult = await queryOne(`
      SELECT COUNT(*) as total
      FROM investimentos i
      ${whereClause}
    `, params);

    res.json({
      investimentos,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: totalResult.total,
        pages: Math.ceil(totalResult.total / limit)
      }
    });
  } catch (error) {
    console.error('Erro ao buscar investimentos:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// GET - Buscar investimento por ID
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const investimento = await queryOne(`
      SELECT i.*, c.nome as categoria_nome, c.cor as categoria_cor
      FROM investimentos i
      LEFT JOIN categorias c ON i.categoria_id = c.id
      WHERE i.id = ? AND i.user_id = ?
    `, [id, req.user.id]);

    if (!investimento) {
      return res.status(404).json({ error: 'Investimento não encontrado' });
    }

    res.json({ investimento });
  } catch (error) {
    console.error('Erro ao buscar investimento:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// POST - Criar investimento
router.post('/', authenticateToken, async (req, res) => {
  try {
    const {
      titulo, descricao, valor_inicial, data_inicio, categoria_id,
      tipo_investimento, rendimento_esperado, prazo_resgate, instituicao, observacoes
    } = req.body;

    // Validações
    if (!titulo || !valor || !data_inicio) {
      return res.status(400).json({ error: 'Título, valor e data são obrigatórios' });
    }

    if (valor <= 0) {
      return res.status(400).json({ error: 'Valor deve ser maior que zero' });
    }

    if (rendimento_esperado && (rendimento_esperado < 0 || rendimento_esperado > 100)) {
      return res.status(400).json({ error: 'Rendimento esperado deve estar entre 0 e 100%' });
    }

    // Inserir investimento
    const result = await execute(`
      INSERT INTO investimentos (
        titulo, descricao, valor_inicial as valor_inicial, data_inicio, categoria_id, user_id,
        tipo_investimento, rendimento_esperado, prazo_resgate, instituicao, observacoes
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      titulo, descricao || '', valor_inicial as valor_inicial, data_inicio,
      categoria_id || null, req.user.id, tipo_investimento || 'acoes',
      rendimento_esperado || null, prazo_resgate || null,
      instituicao || '', observacoes || ''
    ]);

    // Buscar investimento criado
    const investimento = await queryOne(`
      SELECT i.*, c.nome as categoria_nome, c.cor as categoria_cor
      FROM investimentos i
      LEFT JOIN categorias c ON i.categoria_id = c.id
      WHERE i.id = ?
    `, [result.insertId]);

    res.status(201).json({
      message: 'Investimento criado com sucesso',
      investimento
    });
  } catch (error) {
    console.error('Erro ao criar investimento:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// PUT - Atualizar investimento
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const {
      titulo, descricao, valor_inicial as valor_inicial, data_inicio, categoria_id,
      tipo_investimento, rendimento_esperado, prazo_resgate, instituicao, observacoes, status
    } = req.body;

    // Verificar se o investimento existe e pertence ao usuário
    const existingInvestimento = await queryOne(
      'SELECT * FROM investimentos WHERE id = ? AND user_id = ?',
      [id, req.user.id]
    );

    if (!existingInvestimento) {
      return res.status(404).json({ error: 'Investimento não encontrado' });
    }

    // Validações
    if (!titulo || !valor || !data_inicio) {
      return res.status(400).json({ error: 'Título, valor e data são obrigatórios' });
    }

    if (valor <= 0) {
      return res.status(400).json({ error: 'Valor deve ser maior que zero' });
    }

    if (rendimento_esperado && (rendimento_esperado < 0 || rendimento_esperado > 100)) {
      return res.status(400).json({ error: 'Rendimento esperado deve estar entre 0 e 100%' });
    }

    // Atualizar investimento
    await execute(`
      UPDATE investimentos SET 
        titulo = ?, descricao = ?, valor = ?, data_inicio = ?, categoria_id = ?,
        tipo_investimento = ?, rendimento_esperado = ?, prazo_resgate = ?, 
        instituicao = ?, observacoes = ?, status = ?
      WHERE id = ?
    `, [
      titulo, descricao || '', valor_inicial as valor_inicial, data_inicio, categoria_id || null,
      tipo_investimento || 'acoes', rendimento_esperado || null, prazo_resgate || null,
      instituicao || '', observacoes || '', status || 'ativo', id
    ]);

    // Buscar investimento atualizado
    const investimento = await queryOne(`
      SELECT i.*, c.nome as categoria_nome, c.cor as categoria_cor
      FROM investimentos i
      LEFT JOIN categorias c ON i.categoria_id = c.id
      WHERE i.id = ?
    `, [id]);

    res.json({
      message: 'Investimento atualizado com sucesso',
      investimento
    });
  } catch (error) {
    console.error('Erro ao atualizar investimento:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// DELETE - Deletar investimento
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    // Verificar se o investimento existe e pertence ao usuário
    const investimento = await queryOne(
      'SELECT * FROM investimentos WHERE id = ? AND user_id = ?',
      [id, req.user.id]
    );

    if (!investimento) {
      return res.status(404).json({ error: 'Investimento não encontrado' });
    }

    // Deletar investimento
    await execute('DELETE FROM investimentos WHERE id = ?', [id]);

    res.json({ message: 'Investimento deletado com sucesso' });
  } catch (error) {
    console.error('Erro ao deletar investimento:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// PUT - Marcar como resgatado
router.put('/:id/resgatar', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    // Verificar se o investimento existe e pertence ao usuário
    const investimento = await queryOne(
      'SELECT * FROM investimentos WHERE id = ? AND user_id = ?',
      [id, req.user.id]
    );

    if (!investimento) {
      return res.status(404).json({ error: 'Investimento não encontrado' });
    }

    if (investimento.status === 'resgatado') {
      return res.status(400).json({ error: 'Investimento já foi resgatado' });
    }

    // Marcar como resgatado
    await execute(
      'UPDATE investimentos SET status = "resgatado" WHERE id = ?',
      [id]
    );

    res.json({ message: 'Investimento marcado como resgatado' });
  } catch (error) {
    console.error('Erro ao resgatar investimento:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// GET - Estatísticas dos Investimentos
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    // Buscar todos os investimentos ativos do usuário
    const investimentos = await query(`
      SELECT 
        valor,
        rendimento_esperado,
        data_inicio,
        status
      FROM investimentos 
      WHERE user_id = ? AND status = 'ativo'
    `, [userId]);

    let totalInvestido = 0;
    let valorAtual = 0;
    let lucroTotal = 0;
    let rentabilidades = [];

    // Calcular performance de cada investimento
    investimentos.forEach(investimento => {
      const valorInicial = parseFloat(investimento.valor);
      const rendimentoEsperado = parseFloat(investimento.rendimento_esperado) || 0;
      const dataInvestimento = new Date(investimento.data_inicio);
      const hoje = new Date();
      const diasInvestido = Math.max(1, Math.floor((hoje - dataInvestimento) / (1000 * 60 * 60 * 24)));
      const rendimentoAnual = rendimentoEsperado / 100;
      const rendimentoDiario = rendimentoAnual / 365;
      const valorAtualInvestimento = valorInicial * Math.pow(1 + rendimentoDiario, diasInvestido);
      const lucro = valorAtualInvestimento - valorInicial;
      const percentualLucro = (lucro / valorInicial) * 100;

      totalInvestido += valorInicial;
      valorAtual += valorAtualInvestimento;
      lucroTotal += lucro;
      rentabilidades.push(percentualLucro);
    });

    // Calcular estatísticas gerais
    const stats = await queryOne(`
      SELECT 
        COALESCE(SUM(valor), 0) as totalInvestido,
        COUNT(*) as totalRegistros,
        COUNT(CASE WHEN status = 'ativo' THEN 1 END) as investimentosAtivos,
        COUNT(CASE WHEN status = 'resgatado' THEN 1 END) as investimentosResgatados,
        COUNT(CASE WHEN status = 'cancelado' THEN 1 END) as investimentosCancelados
      FROM investimentos 
      WHERE user_id = ?
    `, [userId]);

    // Adicionar cálculos de performance
    stats.valorAtual = valorAtual;
    stats.lucroTotal = lucroTotal;
    stats.rentabilidadeMedia = rentabilidades.length > 0 ? 
      rentabilidades.reduce((a, b) => a + b, 0) / rentabilidades.length : 0;

    res.json({ stats });
  } catch (error) {
    console.error('Erro ao buscar estatísticas:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

module.exports = router; 